<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>psimyn</title>
	<subtitle></subtitle>
	<link href="https://psimyn.com/feed/feed.xml" rel="self"/>
	<link href="https://psimyn.com/"/>
	<updated>2020-02-17T00:00:00Z</updated>
	<id>https://psimyn.com/</id>
	<author>
		<name>Simon Knox</name>
		<email>psimyn@gmail.com</email>
	</author>
	
	<entry>
		<title>Start</title>
		<link href="https://psimyn.com/posts/2016-05-28-welcome/"/>
		<updated>2016-05-28T00:00:00Z</updated>
		<id>https://psimyn.com/posts/2016-05-28-welcome/</id>
		<content type="html">&lt;p&gt;this is a placeholder to see if posts work. Maybe it will stay here for posterity,&lt;br /&gt;
otherwise it will be replaced with some actual content eventually.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Dual-booting Linux and OSX</title>
		<link href="https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/"/>
		<updated>2016-06-12T00:00:00Z</updated>
		<id>https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/</id>
		<content type="html">&lt;p&gt;After far too long putting up&lt;/p&gt;
&lt;p&gt;with OSX&#39;s crap, I finally cracked a few days ago. The actual install/setup bit was pretty straightforward, there was some screwing around getting HFS+ partition shared between the two (I wanted to share most stuff in home directory). For easiest, jump to &lt;a href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#the-good-way&quot;&gt;the good way&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-long-way&quot;&gt;The Long Way &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#the-long-way&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1.-clean-up-osx&quot;&gt;1. Clean up OSX &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#1.-clean-up-osx&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Critical thing here is disable &amp;quot;secure empty trash&amp;quot; in Finder. It was going to take about a week to delete otherwise (I had 1.8M files in there)&lt;/p&gt;
&lt;h3 id=&quot;2.-create-%22partitions%22&quot;&gt;2. Create &amp;quot;partitions&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#2.-create-%22partitions%22&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using Disk Utility, wasn&#39;t able to resize partition for some weird reason. Clicking &amp;quot;+&amp;quot; button allowed adding empty space, but it used nearly all available space. Was hoping for smaller linux partition, but this will do for now. Just click and&lt;/p&gt;
&lt;h3 id=&quot;3.-install-refind&quot;&gt;3. Install rEFInd &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#3.-install-refind&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is comically easy. &lt;a href=&quot;http://www.rodsbooks.com/refind/installing.html&quot;&gt;Download&lt;/a&gt; and run &lt;code&gt;install-refind&lt;/code&gt;. Reboot to verify it works if you want, otherwise power through to install&lt;/p&gt;
&lt;h3 id=&quot;4.-install-linux%2C-choose-partitions-and-add-what-is-needed&quot;&gt;4. Install linux, choose partitions and add what is needed &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#4.-install-linux%2C-choose-partitions-and-add-what-is-needed&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From rEFInd menu, can select USB boot (I had to power-off and boot with USB inserted). Install as normal, when partitioning you probably want to specify you own. Check these options carefully and step 5 should be avoidable.&lt;/p&gt;
&lt;h3 id=&quot;5.-re-install-refind&quot;&gt;5. Re-install rEFInd &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#5.-re-install-refind&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GRUB will nuke replace rEFInd so for now you can only boot into Linux. Fix that with some help from &lt;a href=&quot;http://askubuntu.com/questions/698606/refind-menu-not-showing-on-a-dual-mac-ubuntu-machine&quot;&gt;this guy&lt;/a&gt;. This is very likely avoidable&lt;/p&gt;
&lt;h3 id=&quot;6.-re-order-refind-boot-options-(default-to-linux)&quot;&gt;6. Re-order rEFInd boot options (default to Linux) &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#6.-re-order-refind-boot-options-(default-to-linux)&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;efimanager something something&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7.-no-wifi&quot;&gt;7. No wifi &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#7.-no-wifi&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Classic Linux. This just needed an &lt;code&gt;apt-get install dkms&lt;/code&gt; - but that needs a network connection. Options are either to download the package directly and copy it on some kind of floppy disk, or tether to a phone over bluetooth (which works out of the box..)&lt;/p&gt;
&lt;h3 id=&quot;8.-mount-hfs%2B&quot;&gt;8. Mount HFS+ &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#8.-mount-hfs%2B&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now we have internet, and want to start sharing those tasty directories. Installed &lt;code&gt;hfsplus&lt;/code&gt; package, then mount fails for some reason. Can&#39;t remember the exact error, but I usually assume fsck will fix it. Rebooted to OSX Recovery mode, and tried the black box &amp;quot;repair&amp;quot;. Booted back into Linux and tried mounting again, and everything is ok&lt;/p&gt;
&lt;h3 id=&quot;9.-mount-hfs%2B-in-rw-mode&quot;&gt;9. Mount HFS+ in RW mode &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#9.-mount-hfs%2B-in-rw-mode&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Read-only home directory is not so useful for me. Apparently to mount HFS+ as writable, you need to disable journaling as described on &lt;a href=&quot;https://ineed.coffee/64/how-to-have-both-mac-os-x-and-linux-installed-and-share-the-same-home-directory-files/&quot;&gt;ineed.coffee&lt;/a&gt;. Boot back into OSX and try disabling with various diskutil commands, but they just through unhelpful errors. Turns out it was Core Storage. This whole time&lt;/p&gt;
&lt;h3 id=&quot;10.-kill-core-storage&quot;&gt;10. Kill Core Storage &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#10.-kill-core-storage&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Great overview of how to fix this from &lt;a href=&quot;http://awesometoast.com/yosemite-core-storage-and-partition-woes/&quot;&gt;awesometoast&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two &lt;code&gt;diskutil cs&lt;/code&gt; commands later and you can now disable journaling. But first you need to reinstall rEFInd from osx again (just re-run &lt;code&gt;install-refind&lt;/code&gt; script).&lt;/p&gt;
&lt;h3 id=&quot;11.-disable-hfs%2B-journal&quot;&gt;11. Disable HFS+ Journal &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#11.-disable-hfs%2B-journal&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Reboot, boot into OSX Recovery Mode, open Disk Utility.&lt;br /&gt;
Unmount &amp;quot;Macintosh HD&amp;quot;, then Option click on &amp;quot;File&amp;quot; and Click &amp;quot;disable journaling&amp;quot;&lt;br /&gt;
From &lt;a href=&quot;http://castyour.net/disable-hfs-journaling-leopard-use-disks-readwrite-linux&quot;&gt;castyour.net&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;12.-mount!&quot;&gt;12. Mount! &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#12.-mount!&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Back in linux, you should now be able to mount properly. May need to set UID to 501 (or whatever Apple user is) and possibly &lt;code&gt;chown&lt;/code&gt; the HFS+ mount directory,&lt;br /&gt;
Now symlink any needed stuff from /mnt/ &lt;a href=&quot;https://help.ubuntu.com/community/hfsplus&quot;&gt;Ubuntu docs&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;13.-fix-suspend%2Fresume&quot;&gt;13. Fix Suspend/Resume &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#13.-fix-suspend%2Fresume&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Classic linux volume 2 - resuming from sleep always seems to break or misbehave for some reason. In this case suspend was fine straightaway, but when resuming the screen would turn on briedly, then go black. Hooray.&lt;/p&gt;
&lt;p&gt;After resuming, the screen is either 100% or 0% - and 0 was the value it chose if the brightness was below about 95%. Solution for a while was just mash the &amp;quot;increase brightness&amp;quot; button until it turns back on. For proper fix, install (mba6x)[&lt;a href=&quot;https://github.com/patjak/mba6x_bl&quot;&gt;https://github.com/patjak/mba6x_bl&lt;/a&gt;] and everything is great.&lt;/p&gt;
&lt;h3 id=&quot;14.-fix-other-keymap-annoyances&quot;&gt;14. Fix other keymap annoyances &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#14.-fix-other-keymap-annoyances&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make fn keys fn-by-default, use fn for media keys etc: &lt;code&gt;# echo 2 &amp;gt; /sys/module/hid_apple/parameters/fnmode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What to do about ctrl/alt/super? The physical ordering of Ctrl/Alt/Super is different to normal layout so there is a lot of jumping.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;the-good-way&quot;&gt;The Good Way &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-06-10-macbook-linux-dual-boot/#the-good-way&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Disable CoreStorage on OSX partition (and disable journaling if RW is wanted)&lt;/li&gt;
&lt;li&gt;Install rEFInd&lt;/li&gt;
&lt;li&gt;Install distro of your choosing&lt;/li&gt;
&lt;li&gt;Fix resume and key mappings&lt;/li&gt;
&lt;/ol&gt;
</content>
	</entry>
	
	<entry>
		<title>Web Chess with Vue and Firebase</title>
		<link href="https://psimyn.com/posts/2016-09-22-making-vue-chess/"/>
		<updated>2016-09-22T00:00:00Z</updated>
		<id>https://psimyn.com/posts/2016-09-22-making-vue-chess/</id>
		<content type="html">&lt;p&gt;Some notes for learning Vue.js by building Chess. Because todo apps aren&#39;t very realistic.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://rc.vuejs.org/guide/&quot;&gt;Vue docs&lt;/a&gt; are pretty awesome. I&#39;m going with the RC docs for this - they are complete enough and anything missing is usually available in 1.0.&lt;/p&gt;
&lt;h1 id=&quot;setup&quot;&gt;setup &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-09-22-making-vue-chess/#setup&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Messing about with boilerplate and setup isn&#39;t something I feel like doing right now, so going to use the &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;CLI&lt;/a&gt; to setup.&lt;/p&gt;
&lt;p&gt;From their docs:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i --global vue-cli&lt;br /&gt;vue init webpack vue-chess&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; vue-chess&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also initialise git repo, and add gh-pages branch for hosting&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; init&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit .gitignore -m &lt;span class=&quot;token string&quot;&gt;&quot;init&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout -b gh-pages&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout master&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; -m &lt;span class=&quot;token string&quot;&gt;&quot;vue-cli setup&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a (mostly) bare gh-pages branch - it will later be where we static and compiled files. Then switch back to master, and commit the remaining stuff from Vue.&lt;/p&gt;
&lt;h1 id=&quot;setup-chess&quot;&gt;setup chess &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-09-22-making-vue-chess/#setup-chess&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;At this stage just going to install &lt;a href=&quot;https://github.com/brozeph/node-chess&quot;&gt;chess&lt;/a&gt;. This might be swapped out later, but seems to do everything and I don&#39;t want to worry about things like board validation just yet.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i --save chess
npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;board-component&quot;&gt;Board component &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2016-09-22-making-vue-chess/#board-component&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Firstly update App to point to new component&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// src/App.vue
&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;board&amp;gt;&amp;lt;/board&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import Board from &#39;./components/Board&#39;

export default {
  components: {
    Board
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
html {
  height: 100%;
}

*,
*:before,
*:after {
  box-sizing: border-box;
}

body {
  height: 100%;
  margin: 0;
}

#app {
  color: #2c3e50;
  width: 100%;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now board component: initialise a new game, and make &lt;code&gt;chess&lt;/code&gt;&#39; array of board.squares into rows and columns. Loop over these and print the square notation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// src/components/Board.vue
&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;board&amp;quot;&amp;gt;
    &amp;lt;span v-for=&amp;quot;row in rows&amp;quot;&amp;gt;
      &amp;lt;span v-for=&amp;quot;square in row&amp;quot;&amp;gt;
        
      &amp;lt;/span&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import chess from &#39;chess&#39;

const gameClient = chess.create({PGN: true})

export default {
  data () {
    return {}
  },
  computed: {
    rows () {
      const squares = gameClient.getStatus().board.squares
      return squares.reduce((board, square, index) =&amp;gt; {
        const createNewRow = index % 8 === 0
        if (createNewRow) {
          board.push([])
        }
        const lastRow = board.length - 1
        board[lastRow].push(square)
        return board
      }, [])
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make it look more like a board. Using Vue &lt;code&gt;scoped&lt;/code&gt; styles because names are difficult&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style scoped&amp;gt;
.board {
  padding: 1em;
  background: rgba(88, 88, 88, 0.05);
  display: flex;
  flex-direction: column;
  margin: 0 auto;
  max-width: 600px;
  width: 100%;
  box-shadow: 0 1px 2px rgba(22, 22, 22, 0.2);
  position: relative;
}

.row {
  display: flex;
}

.square {
  cursor: pointer;
  text-align: center;
  flex: 1 1 auto;
  padding: 0;
  display: inline-block;
  vertical-align: top;
  background: white;
  position: relative;
}

.row:nth-child(2n) .square:nth-child(2n),
.row:nth-child(2n+1) .square:nth-child(2n+1) {
  background: #bbb;
}

/* responsive squares */
.square:after {
  content: &#39; &#39;;
  padding-bottom: 100%;
  display: block;
  height: 0;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now found some SVG pieces&lt;/p&gt;
&lt;p&gt;Adding a background&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
&amp;lt;span
  class=&amp;quot;piece&amp;quot;
  v-bind:style=&amp;quot;{&#39;background-image&#39;: backgroundImage(square)}&amp;quot;
&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
...
methods: {
  backgroundImage (square) {
    if (!square.piece) return &#39;&#39;
    const color = square.piece.side.name
    const img = require(`../assets/${color}-${square.piece.type.toLowerCase()}.svg`)
    return `url(${img})`
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
.piece {
  background-size: cover;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Svelte First Impressions</title>
		<link href="https://psimyn.com/posts/2016-12-14-svelte/"/>
		<updated>2016-12-14T20:49:41Z</updated>
		<id>https://psimyn.com/posts/2016-12-14-svelte/</id>
		<content type="html">&lt;p&gt;The Magical Disappearing UI Framework - a JS framework with no runtime. You can write code in familiar looking components/templates, which gets compiled to vanilla JS to serve to the browser. Created by Rich Harris, of rollup fame. He seems to solo a crazy number of projects, usually small and fast.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://svelte.technology/guide&quot;&gt;Docs&lt;/a&gt; have straightforward first example, then covers API docs. Missing some middle ground for setup, but very easy to follow&lt;/li&gt;
&lt;li&gt;Includes a CLI, for easy setup&lt;/li&gt;
&lt;li&gt;Main thing missing is hot/live reloading. For this can start by adding browser plugin or a build script to do this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Started with some sanity checks. &lt;code&gt;bind:checked&lt;/code&gt; works! Seems like an overly simple thing to test for, but checkboxes are important to me.&lt;/p&gt;
&lt;p&gt;Component structure and props looks pretty familiar. Looks quite similar to Vue, with some minor syntax differences. e.g. template interpolation uses single &lt;code&gt;{}&lt;/code&gt; instead of double. Some parts look more like Handlebars, such as &lt;code&gt;{#each}&lt;/code&gt; instead of &lt;code&gt;v-for&lt;/code&gt;. But this makes the code vs template parts pretty clear and easy to see, which is  good. Has getters and setters for mutating state, and event emitters.&lt;/p&gt;
&lt;p&gt;Currently no SSR, but first render is pretty snappy. Generated code is so much nicer to debug that React/Vue.&lt;/p&gt;
&lt;p&gt;TLDR: Looks good! Let&#39;s make something with it.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Learning to swim again</title>
		<link href="https://psimyn.com/posts/2017-10-10-swimming/"/>
		<updated>2017-10-10T00:00:00Z</updated>
		<id>https://psimyn.com/posts/2017-10-10-swimming/</id>
		<content type="html">&lt;p&gt;Following many years of computer use and not going outside, I decided to try some exercise again. There is a swimming pool a few minutes from my house, so that seemed like a good way to go. Hadn&#39;t really swam properly for 10+ years, and first few times I went I found myself completely exhausted after just a few laps. Was trying to do freestyle, and had forgotten how to breathe properly, how to kick and all sorts of basics. Eventually I remembered to google some advice after getting home (instead of getting distracted by code). Three super useful things took me from &amp;quot;can barely breathe after 3 laps&amp;quot; to swimming patiently and properly enough that I now usually swim until I get bored or run out of time.&lt;/p&gt;
&lt;h3 id=&quot;1.-mouth-inhale%2C-nose-exhale&quot;&gt;1. Mouth inhale, nose exhale &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2017-10-10-swimming/#1.-mouth-inhale%2C-nose-exhale&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Initially I was breathing out through my mouth. This meant when I turned my head out of the water I had a brief exhale before breathing in. This eats into a lot of head-out-of-water time, and you need that! &lt;a href=&quot;https://www.active.com/swimming/articles/4-steps-to-easy-breathing-in-freestyle-880607&quot;&gt;This great read&lt;/a&gt; suggested some out-of-water breathing to get used to it, then some practice in water until it feels more natural. Didn&#39;t take very long to get used to this again, and now have much more time to breathe while head is out of water.&lt;/p&gt;
&lt;p&gt;Another one from that same link is to keep your head up while breathing (stay &amp;quot;tall&amp;quot;). I took this as looking forward when you turn your head, rather than backward. This keeps airway open and makes breathing much easier. Another obvious one, but you don&#39;t think of this when you are exhausted and actually in the pool.&lt;/p&gt;
&lt;h3 id=&quot;2.-swim-slowly&quot;&gt;2. Swim slowly &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2017-10-10-swimming/#2.-swim-slowly&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Probably an obvious one, got this one from a random person at the pool. Rather than going for speed, just focus on doing things correctly. Part of this is getting comfortable with swimming slowly and continuously. Goal here is to find a comfortable pace to just keep on swimming comfortably. This is helped a lot by:&lt;/p&gt;
&lt;h3 id=&quot;3.-little-kicks!&quot;&gt;3. Little kicks! &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2017-10-10-swimming/#3.-little-kicks!&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This made the biggest difference. Probably obvious, but my early attempts were doing big strong kicks to move a lot of water. Googling something along the lines of &amp;quot;swimming big kicks or little kicks&amp;quot; gave me a great article that I can no longer find. But the theme from other pieces is: &lt;strong&gt;make your kicks low effort&lt;/strong&gt;. Small kicks reduce your drag, which makes you much less tired. And important to relax your legs - kick the way you walk. So move your leg from the hip, and just relax the rest of your leg. Too much effort from knees or trying to point toes will just make you needlessly tired. Kicking doesn&#39;t give you much propulsion anyway - apparently most of it comes from the arms.&lt;/p&gt;
&lt;p&gt;There is still much improvement to be made, but this has been the first exercise I&#39;ve committed to in a long time :)&lt;/p&gt;
&lt;h3 id=&quot;some-links&quot;&gt;Some links &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2017-10-10-swimming/#some-links&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.triathlonmag.com.au/training/swim/7597-3-golden-rules-of-a-good-swim-kick-&quot;&gt;https://www.triathlonmag.com.au/training/swim/7597-3-golden-rules-of-a-good-swim-kick-&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.enjoy-swimming.com/flutter-kick.html&quot;&gt;http://www.enjoy-swimming.com/flutter-kick.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.swimsmooth.com/kick_adv.html&quot;&gt;http://www.swimsmooth.com/kick_adv.html&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Online Pull Quotes</title>
		<link href="https://psimyn.com/posts/2017-10-12-pull-quotes/"/>
		<updated>2017-10-12T21:01:07Z</updated>
		<id>https://psimyn.com/posts/2017-10-12-pull-quotes/</id>
		<content type="html">&lt;p&gt;I hate pull quotes. I especially hate them for online articles. And &lt;em&gt;especially&lt;/em&gt; when they are on phones. But given the single-column-default of most online content currently, they are bad on any screen size.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://adactio.com/journal/11102&quot;&gt;Jeremy Keith&lt;/a&gt; already wrote about this, and his post includes examples showing why they are bad. You can probably read it instead of the following few paragraphs since the sentiment is the same and his writing style is better. It still didn&#39;t tell me why they exist though..&lt;/p&gt;
&lt;p&gt;In magazines or print media I can understand why they might make sense - someone flipping through pages and skimming the content sees an interesting quote in big colorful text. That draws you in to read the article, and you have an easier time skipping past that bit of text. Even so, I usually get at least halfway through a sentence before I realise it&#39;s the same damn one as 3cm away, and someone thought it was a good idea to write it twice..&lt;/p&gt;
&lt;p&gt;But for online articles it makes no sense to me. In an online article, I am not casually flipping. I don&#39;t need an attention-grabber 3/4 of the way down the page to grab my interest. I am trying to read the piece!&lt;/p&gt;
&lt;p&gt;You usually can&#39;t skip over them - they are eye-catching and large enough that you always see them. So you start reading the sentence and realise that it is the same as the one 3 lines above!&lt;/p&gt;
&lt;p&gt;I don&#39;t know if there is a good reason for them being there, or it&#39;s still people trying to imitate print. Maybe this is for people who don&#39;t like to read the text, but still like to say they scrolled to the bottom of the page. Skim a few key quotes and call it read.&lt;/p&gt;
&lt;p&gt;Maybe they&#39;ll make more sense with &lt;code&gt;display: grid&lt;/code&gt; or other clever layouts - I&#39;d be fine with pull quotes that were off to the side of the page (maybe). But full-width giant text taking up my whole phone screen? I do not want this.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Clean git history doesn&#39;t really matter</title>
		<link href="https://psimyn.com/posts/2017-10-13-clean-git-history/"/>
		<updated>2017-10-13T20:30:10Z</updated>
		<id>https://psimyn.com/posts/2017-10-13-clean-git-history/</id>
		<content type="html">&lt;p&gt;There is often a lot of talk around how important it is to squash your commits, or to rebase your work into logical commits. These are not terrible ideas. Reading through the commit history of a project with tastefully crafted atomic commits makes for a fun afternoon. But I don&#39;t think it is as important as it is made out to be. That was a lot of two-letter words in one sentence.&lt;/p&gt;
&lt;p&gt;In real-life code often you might want to do things like &amp;quot;remove this wrapper function from modules&amp;quot;. Or &amp;quot;run &lt;code&gt;lint --fix&lt;/code&gt; and commit the result&amp;quot;. But at the risk of ruining the commit history we don&#39;t do it. And the inconsistencies keep going and growing. These types of commits always exist though. From the &amp;quot;burn down the codebase and start again&amp;quot; type initial commit, &amp;quot;convert all tabs/spaces to spaces/tabs&amp;quot;.&lt;/p&gt;
&lt;p&gt;If there is benefit in doing this (there often is), I don&#39;t think keeping git history clean is a valid counter argument. Ideally, tools should be able to ignore these commits. Maybe a &lt;code&gt;[fix-lint]&lt;/code&gt; commit message or something, to signal that it should be skipped from blame/log exploration. Or always ignore insignificant whitespace. I don&#39;t know of any tools that do this currently, but it seems more useful finding a way to do this than wallowing in the gross inconsistencies of your current codebase.&lt;/p&gt;
&lt;p&gt;And ultimately, HEAD is the only commit most people are going to see anyway. You read current code more than a complete history of your code.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>bundle install fails updating json</title>
		<link href="https://psimyn.com/posts/2017-10-14-bundle-install-json/"/>
		<updated>2017-10-14T17:54:00Z</updated>
		<id>https://psimyn.com/posts/2017-10-14-bundle-install-json/</id>
		<content type="html">&lt;p&gt;This has happened to be at least a few times. It is usually when I dig up an old repo on a random machine and want to run a dev server. Or something. But I run &lt;code&gt;bundle install&lt;/code&gt;, and get this super unhelpful error. In the case of my github-pages repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;An error occurred while installing json (1.8.3), and Bundler cannot continue.
Make sure that `gem install json -v &#39;1.8.3&#39;` succeeds before bundling.

In Gemfile:
  github-pages was resolved to 80, which depends on
    jekyll-mentions was resolved to 1.1.2, which depends on
      html-pipeline was resolved to 2.4.1, which depends on
        activesupport was resolved to 4.2.8, which depends on
          json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I try running what it says: &lt;code&gt;gem install json -v &#39;1.7.7&#39;&lt;/code&gt;. Which fails with this (don&#39;t worry about reading it):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[simon@mahayana psimyn.github.io]$ gem install json -v &#39;1.8.3&#39;
Building native extensions.  This could take a while...
ERROR:  Error installing json:
	ERROR: Failed to build gem native extension.

    current directory: /home/simon/.gem/ruby/2.3.0/gems/json-1.8.3/ext/json/ext/generator
/usr/bin/ruby -r ./siteconf20171014-13349-1574b2v.rb extconf.rb
creating Makefile

current directory: /home/simon/.gem/ruby/2.3.0/gems/json-1.8.3/ext/json/ext/generator
make &amp;quot;DESTDIR=&amp;quot; clean

current directory: /home/simon/.gem/ruby/2.3.0/gems/json-1.8.3/ext/json/ext/generator
make &amp;quot;DESTDIR=&amp;quot;
compiling generator.c
generator.c: In function ‘generate_json’:
generator.c:861:25: error: ‘rb_cFixnum’ undeclared (first use in this function); did you mean ‘mFixnum’?
     } else if (klass == rb_cFixnum) {
                         ^~~~~~~~~~
                         mFixnum
generator.c:861:25: note: each undeclared identifier is reported only once for each function it appears in
generator.c:863:25: error: ‘rb_cBignum’ undeclared (first use in this function); did you mean ‘rb_cFixnum’?
     } else if (klass == rb_cBignum) {
                         ^~~~~~~~~~
                         rb_cFixnum
make: *** [Makefile:242: generator.o] Error 1

make failed, exit code 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&#39;t even know what to do with that. But I don&#39;t want it. So this is &amp;quot;just randomly google the error&amp;quot; time. Issue is that certain versions of ruby want certain versions of json. Checking &lt;code&gt;ruby --version&lt;/code&gt; I am running 2.4, which is widely reported to not work with a lot of things (i.e. &lt;a href=&quot;https://github.com/flori/json/issues/303&quot;&gt;some json versions&lt;/a&gt; or &lt;a href=&quot;https://github.com/github/pages-gem/issues/376&quot;&gt;the pages gem&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One solution at this point is to install rvm or chruby, then use Ruby 2.3.something and this stuff will just work. I don&#39;t really feel like doing that. Another is to just blindly update system deps and see if that fixes anything. Kind of a blunt hammer, I will learn nothing, but it sometimes works. Kick off a pacman/apt/brew/etc update in the background just in case other things aren&#39;t working. Good reason to do that anyway in case you always forget.&lt;/p&gt;
&lt;p&gt;Eventually find I should have just read that chain of dependencies from the first error - need a newer json version, which was changed in a newer activesupport version. So need to update the version of activesupport.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bundle update activesupport
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sorted.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>tmux</title>
		<link href="https://psimyn.com/posts/2018-08-16-tmux/"/>
		<updated>2018-08-16T09:07:50Z</updated>
		<id>https://psimyn.com/posts/2018-08-16-tmux/</id>
		<content type="html">&lt;p&gt;I often start a long running command and then realise I didn&#39;t start tmux.&lt;br /&gt;
probably npm install. Or a long awaited apt update.&lt;/p&gt;
&lt;p&gt;I remembered reading something before on &amp;quot;move current command to tmux&amp;quot;.&lt;br /&gt;
Went looking for that and found &lt;a href=&quot;https://superuser.com/a/748494/720701&quot;&gt;this SO&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctrl z                   # pause the process
bg                       # resume it in the background
jobs -l
# get process number
disown PROCESS_NAME
tmux
reptyr pid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cannot test right now as I don&#39;t have repytr installed. More importanntly, I don&#39;t&lt;br /&gt;
want to remember that much. That&#39;s a lot of things to type every time.&lt;/p&gt;
&lt;p&gt;Why not start tmux automatically when shell starts!&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://stackoverflow.com/a/11069117/4423351&quot;&gt;SO&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# warning this &amp;lt;mark&amp;gt;may&amp;lt;/mark&amp;gt; now corrupt your Ubuntu logins
if [[ ! $TERM =~ screen ]]; then
    exec tmux
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BUT, as they go on with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, there is a very small risk this can make bash behave in a way that other programs don&#39;t expect, since running bash can possibly cause it to turn into a tmux process, so it might be better to modify how you start your terminal emulator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This does not sound good. So instead I will start auto-start tmux when launching the terminal emulator.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://medium.com/@sasom/auto-starting-tmux-in-iterm2-4276182d452a&quot;&gt;Medium post&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Navigate to “Preferences &amp;gt; Profiles &amp;gt; PROFILE &amp;gt;Command &amp;gt; Send text at start” and set it to:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;tmux ls &amp;amp;&amp;amp; read tmux_session &amp;amp;&amp;amp; tmux attach -t ${tmux_session:-default} || tmux new -s ${tmux_session:-default}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This caused an error&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Failed to execute tmux
PATH=/usr/bin:/bin:/usr/sbin:/sbin
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Writing Habit</title>
		<link href="https://psimyn.com/posts/2019-02-19-writing/"/>
		<updated>2019-02-19T06:49:41Z</updated>
		<id>https://psimyn.com/posts/2019-02-19-writing/</id>
		<content type="html">&lt;p&gt;I love this &lt;a href=&quot;http://eleganthack.com/temporal-landmarks/&quot;&gt;excellent Eleganthack post&lt;/a&gt; about writing daily. Aiming to form a  more regular writing habit by short daily attempts, rather than annual marathons.&lt;/p&gt;
&lt;p&gt;Daily (or most-day) habits are a good way to stick to things. You quickly identify when you stop doing something if you miss a few days. Then you can either correct it and resume, or decide it&#39;s not worth it and move on. Dropping habits that you don&#39;t miss is as important as adding new ones - you cannot add activities ad-finitum to a finite day.&lt;/p&gt;
&lt;p&gt;The idea of 15 minutes writing then five minutes editing is a nice starting point. I&#39;m interested to see how it develops; in particular if I can start using the 15 minutes for Hemingway-mode style writing with no deletions, rather than wasting valuable seconds rewording the previous sentence. As for editing in five minutes, beyond proofreading and minor fixes there is not much that can be done in five minutes. Maybe some basic structure changes, and spellchecking my broken keyboard typos.&lt;/p&gt;
&lt;p&gt;I am often stuck on the &amp;quot;what to write&amp;quot; front. I take a lot of notes, but spread between dozens of different files and formats. Committing them somewhere more central is a good way to try to flesh out the thoughts more than simple two-line scrawls.&lt;/p&gt;
&lt;p&gt;The distinction between private and public writing is also interesting. I&#39;ve never tried to journal or otherwise transcribe my inner monologue. I&#39;m quite curious what that would look like. I think (without having tried) that it&#39;s important to differentiate between private and public writing. When writing something not intended for anyone else to read, you can be more direct, more honest, and take more shortcuts. I know what my stupid 12 character acronyms stand for, and like not having to expand them.&lt;/p&gt;
&lt;p&gt;Whether the 15 minutes alternates between public/private, or changes to 10 minutes, or something else, remains to be seen.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Self-Hosting File Sync</title>
		<link href="https://psimyn.com/posts/2019-02-23-file-sync/"/>
		<updated>2019-02-22T23:23:41Z</updated>
		<id>https://psimyn.com/posts/2019-02-23-file-sync/</id>
		<content type="html">&lt;p&gt;I&#39;ve been investigating self-hosted Dropbox alternatives. Partly privacy, partly due to running low on space all the time. Based on time&lt;br /&gt;
investment, it would have been cheaper to just pay Dropbox but here we are.&lt;/p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;Requirements &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2019-02-23-file-sync/#requirements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;multi-OS&lt;/strong&gt;. At a minimum need support for Android, Linux, Windows, &amp;amp; macOS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;revision control&lt;/strong&gt;. At least be able to undelete files. Preferably fewer steps than git; just want to save and have it autosync&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;handle conflicts&lt;/strong&gt;. Don&#39;t blindly overwrite! Dropbox&#39;s approach is fine here, just create duplicate files and I&#39;ll resolve conflicts manually.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uni or bidirectional sync&lt;/strong&gt;. For some folders, such as ebooks, I just want to push them to a device but not have that device send anything back. This is the case for most things on phone. Other than photos, very little of what gets downloaded on phone should come back. Maybe Downloads folder could go to a common &#39;Downloads&#39; dumping ground&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sync single folder&lt;/strong&gt;. While I&#39;ll try keeping a single root &amp;quot;Sync&amp;quot; folder, I&#39;d like to be able to add random folders to sync&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ignore files in a folder&lt;/strong&gt;. I had a desire for this at some point, though cannot remember what it was for&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For no reason in particular, the current shortlist is Syncthing and Nextcloud. For score reasonably green on Wikipedia&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_file_synchronization_software#Open-source&quot;&gt;Comparison of file sync software&lt;/a&gt;. Also considering Seafile, but have not looked for into it yet.&lt;/p&gt;
&lt;h2 id=&quot;syncthing&quot;&gt;Syncthing &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2019-02-23-file-sync/#syncthing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This seems like a Dropbox replacement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;peer-to-peer sharing, can turn off server whenever and it will sync later&lt;/li&gt;
&lt;li&gt;sync single folders, share individual folders with devices&lt;/li&gt;
&lt;li&gt;block-level transfer - faster sync of diffs&lt;/li&gt;
&lt;li&gt;may get confusing if I have folders with same name from different devices. e.g. &#39;Music&#39; is a different thing on Phone vs Media pc&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nextcloud&quot;&gt;Nextcloud &lt;a class=&quot;direct-link&quot; href=&quot;https://psimyn.com/posts/2019-02-23-file-sync/#nextcloud&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;More of an application suite that also does file sync.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;good UI and setup process (docs, letsencrypt etc). Took 10 mins to install and setup.&lt;/li&gt;
&lt;li&gt;User management and admin-y stuff. Good to share links/files easily&lt;/li&gt;
&lt;li&gt;some internet reports of slowness after using for a while. Hard to guage without using for a while, but would want to keep exit strategy in mind.&lt;/li&gt;
&lt;li&gt;less obvious about volume location. Docs say it&#39;s easier to nuke/restart than move storage location which is not great&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this stage I&#39;ve installed both Nextcloud and Syncthing, and doing some trial syncs for a few different workflows. Will try adding a tonne of files to Nextcloud and see if I get any slowdown or resource usage. Would be happy enough to continue using both, use Syncthing primarily, and as a backend for Nextcloud files, then use Nextcloud for more application-y stuff.&lt;/p&gt;
&lt;p&gt;Next thing to look into is backups.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>VSCode idea: Find in similar files</title>
		<link href="https://psimyn.com/posts/vscode-find-similar-files/"/>
		<updated>2019-03-17T00:00:00Z</updated>
		<id>https://psimyn.com/posts/vscode-find-similar-files/</id>
		<content type="html">&lt;p&gt;I want a shortcut for VSCode that lets me &amp;quot;Find in files&amp;quot;, but with the filter pre-filled to current file type. So searching from a scss file will default to searching scss files. Same for rb or js files. This might use a different shortcut to the default find in files, or use the same one but configure pre-filled file types.&lt;/p&gt;
&lt;p&gt;Not sure how it would handle the case where you&#39;d previously set filename filters - should it clear the filter, or only replace empty filter? Not clearing would match the default behaviour a bit better.&lt;/p&gt;
&lt;p&gt;Optionally add multiple file types in some order, and order the results like that. So prefer files that match the current suffix (e.g. &lt;code&gt;_spec.rb&lt;/code&gt;), then show similar file types (&lt;code&gt;.rb&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I haven&#39;t yet found an extension that does this. I&#39;m confident it exists, but I cannot think of how to phrase a search query to find it.&lt;/p&gt;
&lt;p&gt;In the meantime, some useful shortcuts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alt + F12 to go to definition&lt;/li&gt;
&lt;li&gt;Shift + F12 to find usages&lt;/li&gt;
&lt;li&gt;Alt + Click for multiple cursors (totally unrelated but cool)&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Problems with HTML number inputs</title>
		<link href="https://psimyn.com/posts/no-number-inputs/"/>
		<updated>2019-04-01T00:00:00Z</updated>
		<id>https://psimyn.com/posts/no-number-inputs/</id>
		<content type="html">&lt;p&gt;Using &lt;code&gt;type=&amp;quot;number&amp;quot;&lt;/code&gt; on input fields is far less useful than I originally thought. I was previously using it for the form on &lt;a href=&quot;https://psimyn.com/projects#framer&quot;&gt;Framer&lt;/a&gt;. Since they are number fields, having the number keyboard pop up on phones was useful. It also prevents people typing in non-numbers, so there&#39;s some free form validation.&lt;/p&gt;
&lt;p&gt;But there were some issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrollwheel/trackpad will cause your number to go up or down without you noticing&lt;/li&gt;
&lt;li&gt;Default value of the step attribute is not &amp;quot;any&amp;quot;. Decimal numbers will be rounded unless you specify it&lt;/li&gt;
&lt;li&gt;Things consisting of numbers are not necessarily numbers - you don&#39;t want to accidentally increment your credit card number because of scrolling up a little&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typing numbers is not like using an abacus. People don&#39;t enter numbers by adding one at a time. If they do (i.e. quantity fields), you are better off with explicit Add/Remove buttons, rather than the tiny tiny arrows that browser input fields give you.&lt;/p&gt;
&lt;p&gt;There is a great writeup from Filament Group, &lt;a href=&quot;https://www.filamentgroup.com/lab/type-number.html&quot;&gt;I wanted to type a number&lt;/a&gt;, which runs through these problems and gives a solid solution.&lt;/p&gt;
&lt;p&gt;Also see &lt;a href=&quot;https://bradfrost.com/blog/post/you-probably-dont-need-input-typenumber/&quot;&gt;You Probably Don&#39;t Need input type=&amp;quot;number&amp;quot;&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Mock network requests with Puppeteer</title>
		<link href="https://psimyn.com/posts/mock-network-puppeteer/"/>
		<updated>2019-04-19T00:00:00Z</updated>
		<id>https://psimyn.com/posts/mock-network-puppeteer/</id>
		<content type="html">&lt;p&gt;This week&#39;s thing: open an instance of Chrome that gives mock data for particular URLs.&lt;/p&gt;
&lt;p&gt;Useful to mock backend responses when you don&#39;t want to have to donate RAM to minikube when developing locally&lt;/p&gt;
&lt;p&gt;This snippet signs into local GitLab instance, and gives a fake response to the &lt;code&gt;additional_endpoints.json&lt;/code&gt; URL&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; puppeteer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;puppeteer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; browser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; puppeteer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; headless&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; browser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setRequestInterception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;interceptedRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;interceptedRequest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;additional_metrics.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        interceptedRequest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          metrics&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        interceptedRequest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;goto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;http://localhost:3001/users/sign_in&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;input[name=&quot;user[login]&quot;]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;input[name=&quot;user[password]&quot;]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;5iveL!fe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.qa-sign-in-button&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitForSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.header-user-dropdown-toggle&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// await browser.close();&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Antisocial Business</title>
		<link href="https://psimyn.com/posts/2019-04-28-antisocial-media/"/>
		<updated>2019-04-28T09:45:51Z</updated>
		<id>https://psimyn.com/posts/2019-04-28-antisocial-media/</id>
		<content type="html">&lt;p&gt;We&#39;ve really managed to fuck up contact pages over the past decade. The contact page was a pretty simple concept. You would list email address, maybe a phone number, maybe have a contact form if you were particularly fancy (or a business..).&lt;/p&gt;
&lt;p&gt;Now contact pages tend to have a link to the company facebook page, sometimes accompanied by either a form that doesn&#39;t work, or an email address that noone checks. So annoyingly, if I actually want a timely response it usually means messaging over Facebook. Real identity, walled-garden, I-don&#39;t-actually-agree-with-some-of-the-terms arguments aside, this annoys me for a technical reason.&lt;/p&gt;
&lt;p&gt;Facebook allows chatbots. Chatbots had the potential to be great. But they are still fucking awful and noone uses them. So the only reason facebook response is faster is because people are on there all the goddamn time. There are just people manning these accounts to respond to enquiries. We&#39;ve lost the simplicity of FAQs to only-the-most-recent comments, and lost potential email/chat automation by people just being content being on FB every waking hour. This is not a good direction if I just want to know your return policy.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>I hate the news</title>
		<link href="https://psimyn.com/posts/2019-04-28-hate-the-news/"/>
		<updated>2019-04-28T09:45:53Z</updated>
		<id>https://psimyn.com/posts/2019-04-28-hate-the-news/</id>
		<content type="html">&lt;p&gt;I hate the news. That the perception of staying informed takes priority of reading something actually useful to me. Or interesting. Or relevant.&lt;/p&gt;
&lt;p&gt;Incentive for news is to be first, and to get readers&lt;/p&gt;
&lt;p&gt;Being correct is less important. Clickbait is page 1, corrections are on page 9. And this isn&#39;t like the newspaper page 9, where people would actually flip past it. In digital news, page 9 is more like page 9 of Google results - noone sees it.&lt;/p&gt;
&lt;p&gt;Farnam Street&#39;s &lt;a href=&quot;https://fs.blog/2013/12/stop-reading-news/&quot;&gt;You should stop reading the news&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From a podcast (I think also FS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try reading just yesterday&#39;s newspaper. Likely not nearly as interesting&lt;/li&gt;
&lt;li&gt;if you are going to read something, will it still be interesting to you in a year?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aaron Schwartz&#39;s &lt;a href=&quot;http://www.aaronsw.com/weblog/hatethenews&quot;&gt;I hate the news&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;None of these stories have relevance to my life. Reading them may be enjoyable, but it’s an enjoyable waste of time. They will have no impact on my actions one way or another.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>How I Read</title>
		<link href="https://psimyn.com/posts/how-i-read/"/>
		<updated>2019-06-15T06:27:28Z</updated>
		<id>https://psimyn.com/posts/how-i-read/</id>
		<content type="html">&lt;p&gt;I got much more into reading in the last few years. Having barely read a book since finishing high school this was a hard habit to rekindle, but very glad I did.&lt;/p&gt;
&lt;p&gt;In the morning I read something heavy while having a coffee. This book lives on the kitchen table, and I keep a notepad and a pen/pencil there. I usually read these cover to cover, but spend a bit of time with the table of contents before starting and decide on things to skip to or over. Getting better at marginalia, but I still have a deep-seated reluctance to write too much in the books. The notes are a vague summary of important points, also list of good pages/chapters and sometimes quotes. I try to read for 30 mins at least very soon after waking up.&lt;/p&gt;
&lt;p&gt;After this and a bit of work I walk the dog, and usually listen to either biographies, pop-science, or sometimes science-fiction. I tried Audible for a few books, but tended to zone out too often. So I now get ebooks (epub or pdf) and use Google Voice on some Android app to read them. That sweet, tinny, robotic voice at high speed is just unnatural enough to keep my attention. And it comes with the hilarious occasional mispronuniciation, or reading punctuation out load. Dot dot dot.&lt;/p&gt;
&lt;p&gt;One annoyance is page headers/footers, or badly OCRd books from Gutenberg. Having the same content read out every page gets a bit annoying, but not enough for me to edit the book and find/replace the content. If I find an easy way to do that (especially from phone) I would love to start though.&lt;/p&gt;
&lt;p&gt;These books I usually highlight parts I like, but don&#39;t often take notes because writing on a phone is annoying enough when &lt;em&gt;not&lt;/em&gt; also walking the dog. Audible&#39;s easy &#39;add highlight&#39; button was quite good in this regard, but I like being able to review the notes as text rather than audio. And now too happy with this setup to try Amazon&#39;s Audible/Kindle combo so I guess will stick with it for now.&lt;/p&gt;
&lt;p&gt;After that it&#39;s mostly just screens and browsers for the day. I would still like a good PDF reader (both application and physical device) but haven&#39;t found anything I particularly enjoy reading on yet. Kindle is a bit small, most tablets are a bit awkwardly sized. Laptop works ok but less so for reading on floor or couch.&lt;/p&gt;
&lt;p&gt;I keep a fiction book by the bed that I read before going to sleep. Something easier to read that doesn&#39;t need notes. Base goal here is at least 1 page. Ideal is 20 or more, but  I usually go to bed tired and fall asleep fast.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>The Easy Lazy Thing</title>
		<link href="https://psimyn.com/posts/2019-07-13-easy-lazy-thing/"/>
		<updated>2019-07-13T12:44:24Z</updated>
		<id>https://psimyn.com/posts/2019-07-13-easy-lazy-thing/</id>
		<content type="html">&lt;p&gt;It&#39;s very easy to put things off, so that&#39;s what I usually do. The most common way is getting stuck on some tiny detail, then obsessing over that and choosing not to proceed. Tech things are great for this - you can get stuck on tech stack, hardware choices, platforms to use, needless future planning. Millions of tiny details. Most don&#39;t matter.&lt;/p&gt;
&lt;p&gt;A big one for me was always to put off writing. I won&#39;t write a todo list without a quick runthrough of 5 or 6 different options for this. Plain text is simple and portable, but maybe I want formatting or embedded content. List-specific apps are often too short, and some tasks need a bit more details and description. I need something that works reliably offline, but that also syncs between phone and a few computers. At this point people often suggest paper, but I tend not to complete those or just leave them in another room. I&#39;ve fot todos on my whiteboard (which is right next to the damn desk) from weeks ago.&lt;/p&gt;
&lt;p&gt;What helps with all this is having a good easy default thing. It doesn&#39;t have to be the best thing. Or even a particularly great thing. If it&#39;s not actively terrible then it&#39;s better than indecisive stagnation.&lt;/p&gt;
&lt;p&gt;I started actually writing semi regularly when I had a single synced file as my default notepad. I occasionally start stuff there and move it, but a lot of the random notes just stay there which is just fine for now. Doing the thing is better than researching 10 alternative ways of doing the thing, and developing a framework to compare them.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Going Grayscale</title>
		<link href="https://psimyn.com/posts/grayscale/"/>
		<updated>2019-07-16T00:00:00Z</updated>
		<id>https://psimyn.com/posts/grayscale/</id>
		<content type="html">&lt;p&gt;I&#39;ve just switching work laptop to grayscale mode. Done partly to stop apps stealing attention with bright colors, partly to test for accessibility day-to-day. Most difficult thing so far has been viewing diffs; I have to pay more attention to the +/- at the start of the line. Most other stuff has been surprisingly ok. Apps generally look a bit simpler. Video calls feel like watching a movie from the 40s.&lt;/p&gt;
&lt;p&gt;For macOS the setting is in &lt;strong&gt;System Preferences &amp;gt; Accessibility &amp;gt; Display &amp;gt; Use grayscale&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For Android it&#39;s available at night with &#39;Digital Wellbeing&#39; app, but I had problems with that in the past so don&#39;t trust it. Looking for alternative.&lt;/p&gt;
&lt;p&gt;On Windows it can be toggled with Ctrl + Win + C (Or search for &#39;Color Filter&#39;)&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>In-Between Time</title>
		<link href="https://psimyn.com/posts/2019-08-06-in-between-times/"/>
		<updated>2019-08-06T03:31:07Z</updated>
		<id>https://psimyn.com/posts/2019-08-06-in-between-times/</id>
		<content type="html">&lt;p&gt;There&#39;s a lot written about deep work, and flow states, the maker manager schedule, and the general importance of long uninterrupted blocks of time. But I often struggle to find these. I go days or weeks where little distractions keep popping up, and have a lot of shorter blocks.&lt;/p&gt;
&lt;p&gt;Right now it&#39;s 10 minutes at a train station. That&#39;s long enough to be a slightly boring wait, but not a great environment for relaxing, meditating or thinking. Not quite long enough to leave the station and walk to coffee and get back. And I don&#39;t want to default to clearing a few articles/emails off my phone; that is a losing battle and basically a waste of time.&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;is&lt;/em&gt; just enough time to write a couple paragraphs, which is probably a better outcome than gettig wired on coffee anyway.&lt;/p&gt;
&lt;p&gt;Going to try to make productive use of these little snippets of down time. That isn&#39;t to say I&#39;ll be always-on. Intentionally switching off is important. And proper, real, unstructured, unoptimized downtime; time to be bored or let your mind wander. But not at the train station.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>new URL()</title>
		<link href="https://psimyn.com/posts/2019-08-08-new-url/"/>
		<updated>2019-08-07T14:14:13Z</updated>
		<id>https://psimyn.com/posts/2019-08-08-new-url/</id>
		<content type="html">&lt;p&gt;I was looking at this code that gives you query params of a page, defaulting to the current page.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getQueryParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then tests were failing. In tests we were mocking &lt;code&gt;window.location&lt;/code&gt; and returning a simple object.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// so browsers don&#39;t complain about read-only properties&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;setWindowLocation&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;location&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    writable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Javascript is great sometimes. Readonly property bringing you down? Just indirectly add a property to it and say that it&#39;s writeable.&lt;/p&gt;
&lt;p&gt;Anyways, that was causing a test to fail.&lt;/p&gt;
&lt;p&gt;We call it with an object like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function queryThing(url = window.location) {
  let wut = new URL(url)
  return wut.search
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;new URL({})&lt;/code&gt; is invalid. Weeeiiiiiird.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Parameters&quot;&gt;MDN URL constructor page&lt;/a&gt; shows parameters are meant to be strings. They say both arguments should be Strings (&#39;USVString maps to a String when returned in JavaScript&#39;  [1])&lt;/p&gt;
&lt;p&gt;There is a note about the second argument:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: You can still use an existing URL object for the base, which stringifies itself to the object&#39;s href attribute.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;maybe it is something special about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Location&quot;&gt;Location&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But does it have to be a URL object? What about a regular object? In JS that looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fakeLocation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  href&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://great.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeLocation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// works!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// shorthand way&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fakeLocation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  href&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://great.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Time to check the spec. &lt;a href=&quot;https://url.spec.whatwg.org/#constructors&quot;&gt;URL Constructors section&lt;/a&gt; gives the steps of parsing. That references the Basic URL Parser with more steps. But everything only ever mentions a string for the first arg.&lt;/p&gt;
&lt;p&gt;Still no idea how/why this happpens. Had a skim of the Chromium source and found where the error was coming from, and it&#39;s some kind of binding is happening somewhere. Got a semi explanation from #chromium IRC channel but I do not understand enough to pursue it yet.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Long File Names &gt; Excessive Subfolders</title>
		<link href="https://psimyn.com/posts/2019-08-13-long-file-names-no-subfolders/"/>
		<updated>2019-08-12T21:48:09Z</updated>
		<id>https://psimyn.com/posts/2019-08-13-long-file-names-no-subfolders/</id>
		<content type="html">&lt;p&gt;I love &lt;a href=&quot;https://twitter.com/dan_abramov/status/1145354949871767552&quot;&gt;this tweet&lt;/a&gt;: &amp;quot;Long names, flat folders&amp;quot;&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;https://twitter.com/adamwathan/status/1145109572081860610a&quot;&gt;Adam Wathan&#39;s original&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Multiple files with same name is unclear - typing index.js in a project with hundreds of them is not a good time. Needless categorisation and sorting is not very useful, and having a bunch of folders with only one or two files is just frustrating to navigate.&lt;/p&gt;
&lt;p&gt;Browsing relevant files for an app is way easier if I can just see a list without clicking through folders all the time. Grouping can be done with filename prefixes/suffixes.&lt;/p&gt;
&lt;p&gt;Fewer folders, longer filenames!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Jekyll to Eleventy</title>
		<link href="https://psimyn.com/posts/jekyll-to-eleventy/"/>
		<updated>2019-10-13T00:00:00Z</updated>
		<id>https://psimyn.com/posts/jekyll-to-eleventy/</id>
		<content type="html">&lt;p&gt;After literally years of deliberation and procrastination I decided to migrate my site from Jekyll to Eleventy.&lt;/p&gt;
&lt;p&gt;It had enough endorsements from tech people I respect to be at least ok, and didn&#39;t seem overly complex to use. I&#39;d tried several of the more framework-oriented static site generators (Next, Nuxt, Gatsby) and they were a bit too much about build processes and graphql. I basically wanted something that would render markdown as HTML. Not having to learn Go was a selling point over Hugo.&lt;/p&gt;
&lt;p&gt;I read through &lt;a href=&quot;https://24ways.org/2018/turn-jekyll-up-to-eleventy/&quot;&gt;the defacto guide for Jekyll to Eleventy Porting&lt;/a&gt;. Most was still valid; the only out-of-date thing was that layout directory is now configurable!&lt;/p&gt;
&lt;p&gt;First attempt was to just clone the starter blog repo and move my pages into that. But that led to some kind of build error that I didn&#39;t feel like troubleshooting at the time. Instead I opted for incremental - &lt;code&gt;npm install --save-dev @11ty/eleventy&lt;/code&gt; and gradually add as needed. I did this in a branch and just opted things in until everything appeared to be working.&lt;/p&gt;
&lt;p&gt;After getting basic pages and posts, I added in tags and played around with some other content types. Have also now added a Links page inspired by &lt;a href=&quot;https://adactio.com/links&quot;&gt;Adactio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall very simple, I like not having too much framework-lock and like that I could easily switch if something terrible happens with this. Seems solid so far though. Everything has been ok to figure out, and being in JS has made it pretty easy to troubleshoot. Debugging framework code is easy to give up on. I didn&#39;t look too far into debugging Liquid.js errors in some failed template compilations, but a stacktrace of 3 files was nicer to look at than one of twenty.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to check your IP address</title>
		<link href="https://psimyn.com/posts/ip/"/>
		<updated>2019-10-21T00:00:00Z</updated>
		<id>https://psimyn.com/posts/ip/</id>
		<content type="html">&lt;p&gt;Using dig:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dig +short myip.opendns.com @resolver1.opendns.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using curl:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://ipinfo.io/ip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;script style=&quot;display: block&quot; contenteditable=&quot;&quot;&gt;function checkIP() {
  return fetch(&#39;https://ipinfo.io/ip&#39;)
    .then(res =&gt; res.text());
}&lt;/script&gt;
&lt;/code&gt;
&lt;div class=&quot;flex&quot;&gt;
  &lt;button id=&quot;get-ip&quot;&gt;Click to fetch&lt;/button&gt;
  &lt;div id=&quot;ip&quot;&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/pre&gt;
&lt;script&gt;
  var btn = document.querySelector(&#39;#get-ip&#39;);
  btn.addEventListener(&#39;click&#39;, function() {
    var ip = document.querySelector(&#39;#ip&#39;);
    ip.innerHTML = &#39;Loading&#39;;
    checkIP().then(address =&gt; {
      ip.innerHTML = address;
    });
    btn.parentNode.appendChild(ip);
  })
&lt;/script&gt;
&lt;style&gt;
#get-ip {
  line-height: 2;
  font-size: 1.2em;
}

#ip {
  font-size: 2em;
  font-weight: bold;
  margin-left: auto;
}

.flex {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

pre {
  max-width: 680px;
}
&lt;/style&gt;
</content>
	</entry>
	
	<entry>
		<title>AMP&#39;s Branding Problem</title>
		<link href="https://psimyn.com/posts/amps-branding-problem/"/>
		<updated>2019-10-29T00:00:00Z</updated>
		<id>https://psimyn.com/posts/amps-branding-problem/</id>
		<content type="html">&lt;p&gt;Last month I went to AMP Roadshow in Melbourne. Was a day of presentations and a bit of playing around with AMP stuff. AMP appears to be quite a different project to what it was three years ago.&lt;/p&gt;
&lt;p&gt;AMP is no longer an ancronym for Accelerated Mobile Pages - now it&#39;s the project name. This AMP is meant as more of a lightweight [citation needed] framework for making webapps, rather than just a way to get better Google rank and a ⚡ next to your page title.&lt;/p&gt;
&lt;p&gt;Accelerated Mobile Pages faced some deserved backlash at first. Fixed top bars, hard-to-share links, and double loading to get to actual content were all big negatives. The limited interactive elements meant you got a very stripped down version of the page, and clicking on anything meant you usually loaded the full, now-even-more-bloated-because-we-assumed-AMP-would-take-care-of-it page.&lt;/p&gt;
&lt;p&gt;The &#39;keeping people on Google rather than their own servers&#39; aspect is an ongoing downside. But as a simple app framework it shows promise. Like what I had wanted from Polymer Elements but with a friendlier API. The better solution is obviously &amp;quot;just make faster pages&amp;quot;. But the industry has had a demonstrably hard time doing that and page bloat continues to grow out of control.&lt;/p&gt;
&lt;p&gt;The AMP library contains a lot of components now and seems like a decent way to make a PWA (further research on this pending). It is probably too late to rename, but for many the name still carries a lot of baggage from the bad early days. Will be curious to see if it overcomes the rep, or that is just gradually forgotten.&lt;/p&gt;
&lt;p&gt;Or if this is all just a ruse and it&#39;s still a Google marketing play. Time will tell.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>linksync</title>
		<link href="https://psimyn.com/posts/linksync/"/>
		<updated>2019-10-29T00:00:00Z</updated>
		<id>https://psimyn.com/posts/linksync/</id>
		<content type="html">&lt;p&gt;I switch between browsers quite a lot, mostly between firefox and chromium-based ones depending on what I&#39;m doing or my current mood. Because of this I haven&#39;t been able to rely on bookmarks from browser, and prefer somewhere centrol to keep links. &lt;a href=&quot;https://getpocket.com/&quot;&gt;Pocket&lt;/a&gt; has extensions for most browers, and gives a quite decent overlay UI for saving links and adding tags. The only thing I couldn&#39;t add was notes. I like to add short descriptions or notes and sometimes cross-link things to help remember and find things later.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.com/psimyn/linksync&quot;&gt;linksync&lt;/a&gt; is a simple script that grabs items from the Pocket API that I&#39;ve tagged with &#39;links&#39;, grabs some data from each, and adds a new item in my websites &lt;code&gt;links&lt;/code&gt; folder (as a draft). It will then pop up on my computer later. I&#39;ll maybe add a description or some additional tags, then save and publish the site. Eventually would like to automate that as well, but haven&#39;t decided how I want it to work yet. Probably just publish master will be simplest.&lt;/p&gt;
&lt;p&gt;Quick recap of making a Pocket app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://getpocket.com/developer/apps/new&quot;&gt;Create a Pocket Application&lt;/a&gt; and give it the Retreive permission.&lt;/li&gt;
&lt;li&gt;Manually went through the steps in the &lt;a href=&quot;https://getpocket.com/developer/docs/authentication&quot;&gt;Pocket Authentication API Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add queries from the &lt;a href=&quot;https://getpocket.com/developer/docs/v3/retrieve&quot;&gt;Pocket Retreive API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Store &lt;code&gt;last_updated&lt;/code&gt; value to only fetch recently added items&lt;/li&gt;
&lt;/ol&gt;
</content>
	</entry>
	
	<entry>
		<title>Automate Later</title>
		<link href="https://psimyn.com/posts/automate-later/"/>
		<updated>2019-12-01T00:00:00Z</updated>
		<id>https://psimyn.com/posts/automate-later/</id>
		<content type="html">&lt;p&gt;I wanted to set up backups for a few computers. Basically mirror a hard drive where I keep some photos and music so I don&#39;t lose em in case of hard drive failure or extreme flooding.&lt;/p&gt;
&lt;p&gt;I bought some external drives &lt;em&gt;months&lt;/em&gt; ago to do this, had them sitting in a case ready to go, but then got caught up with how mirroring should work, And how to automate them to handle deletions and things properly, but not wipe all the data if a drive has failed. And preferably some kind of archive mode so I can restore things that get accidentally changed or deleted.&lt;/p&gt;
&lt;p&gt;But this was already way too complicated and I was stuck in the &amp;quot;doing research on the thing instead of the thing&amp;quot; stage. Stage 1 was instead a manual copy onto the disk. That meant the data is saved to the external and I&#39;ve saved the multiple hours of copying time when it&#39;s eventually automated later.&lt;/p&gt;
&lt;p&gt;Good steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Manual bad way, do the thing as simply as possible&lt;/li&gt;
&lt;li&gt;Manual better way. Preferably repeatable, some kind of script or command&lt;/li&gt;
&lt;li&gt;Automatic with trigger or confirmation. Start running it but still check&lt;/li&gt;
&lt;li&gt;Automatic. In the background, hopefully not something you need to think about anymore&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For backups, starting with a basic &lt;code&gt;cp&lt;/code&gt; is fine. Adding a cron job for rsync with a bunch of conditional rules can come later.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>undisturbed</title>
		<link href="https://psimyn.com/posts/undisturbed/"/>
		<updated>2019-12-18T00:00:00Z</updated>
		<id>https://psimyn.com/posts/undisturbed/</id>
		<content type="html">&lt;p&gt;I&#39;ve had my phone on do-not-disturb for most of the last 5 years. It took a few months before I stopped getting &lt;a href=&quot;https://en.wikipedia.org/wiki/Phantom_vibration_syndrome&quot;&gt;phantom vibrations&lt;/a&gt;, since then I haven&#39;t experienced that at all. Now it doesn&#39;t ring (ringer volume at 0, ringtone is no sound) and doesn&#39;t vibrate.&lt;/p&gt;
&lt;p&gt;If I&#39;m expecting a delivery or something and actually need it to alert me then I will turn on vibrate. But most of the time it sits there silently; if I&#39;m not looking at it I miss calls. Recently for some reason they don&#39;t even pop up so I miss them even if I &lt;em&gt;am&lt;/em&gt; looking at it.&lt;/p&gt;
&lt;p&gt;Phones are stupidly disruptive. Email is a todo list that anyone can add to; phones are a fire alarm that anyone can pull without consequences.&lt;/p&gt;
&lt;p&gt;For an easier transition, using &lt;a href=&quot;https://support.google.com/assistant/answer/9157337&quot;&gt;Wind Down&lt;/a&gt; on Android auto enables do-not-disturb at night (or whenever you choose). This is helpful if you want notifications back on later and forget to toggle.&lt;/p&gt;
&lt;p&gt;I&#39;ve also tried to cut down on computer notifications. For work that is mainly Slack, and for Slack the big 3 things were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disable popup notifications&lt;/li&gt;
&lt;li&gt;disable red dots&lt;/li&gt;
&lt;li&gt;use DND (or close it) when not using&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And switching screen to &lt;a href=&quot;https://psimyn.com/posts/grayscale&quot;&gt;grayscale&lt;/a&gt; toward the end of the day helps cut out the attention-grabbing hyper-saturated colors of the current web.&lt;/p&gt;
&lt;p&gt;I am still not particularly good at staying focused. But minimizing these cuts down on background noise and cuts out a lot of disturbances.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Preventing Info FOMO</title>
		<link href="https://psimyn.com/posts/info-fomo/"/>
		<updated>2019-12-31T00:00:00Z</updated>
		<id>https://psimyn.com/posts/info-fomo/</id>
		<content type="html">&lt;p&gt;This year was the first time I was above inbox zero since I started doing it early in the decade. I got through most of my action-required emails (don&#39;t get many of those), so it was mainly newsletters with either longer articles or links. The link newsletters are risky, since it looks easy to read by can quickly turn into 10+ tabs that will take much longer to read.&lt;/p&gt;
&lt;p&gt;But they could (and do!) contain valuable learnings, so I always added them to my read later list. For emails this just mean leaving them unread, in the Updates tab, where they don&#39;t take up my attention but are constant back of mind growing list of things to do.&lt;/p&gt;
&lt;p&gt;Couple of good reads this month helped me get over this. Driving force was the &lt;a href=&quot;https://www.smashingmagazine.com/2016/12/digital-clean-up-checklist/&quot;&gt;Ultimate Digital Cleanup checklist&lt;/a&gt; which suggests deleting update/notification emails, and unsubscribing from newsletters you no longer want. I had already done this for some, but tried with stricter criteria for what to keep.&lt;/p&gt;
&lt;p&gt;Other one was &lt;a href=&quot;https://news.ycombinator.com/item?id=21902130&quot;&gt;this HN post&lt;/a&gt; with someone in a way worse spot. This both made me feel better about my own to-read list, and having many people say &amp;quot;just delete everything it doesn&#39;t actually matter&amp;quot; was reassuring.&lt;/p&gt;
&lt;p&gt;Funnily, I saved this to Pocket so it could be added to &lt;a href=&quot;https://psimyn.com/links&quot;&gt;/links&lt;/a&gt;. Then Pocket tells me I have a 900+ item backlog!!! It is a great idea though I love this feature&lt;/p&gt;
&lt;style&gt;
.phone-bottom {
  border: solid #111;
  border-width: 1px 1rem 3rem 1rem;
  border-radius: 0 0 1rem 1rem;
  box-shadow: 0 2px 3px #222,
    8px 8px 16px -4px #222b;
  margin-bottom: 2rem;
}
&lt;/style&gt;
&lt;img class=&quot;phone phone-bottom&quot; src=&quot;https://psimyn.com/img/compound-info-overload.png&quot; alt=&quot;Pocket&#39;s Listen feature promotion telling me I have 948 things to read&quot; /&gt;
&lt;p&gt;Finally, listened to &lt;a href=&quot;https://overcast.fm/+OP0KDV5EE&quot;&gt;this great podcast&lt;/a&gt;, which  looks at 500 years of information overload. Once books could be mass produced (i.e. not take a scribe 1 year to write) then there were too many books to read in a lifetime.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Better mobile screenshots</title>
		<link href="https://psimyn.com/posts/better-mobile-screenshots/"/>
		<updated>2020-01-02T00:00:00Z</updated>
		<id>https://psimyn.com/posts/better-mobile-screenshots/</id>
		<content type="html">&lt;p&gt;A useful tip when adding screenshots to posts or talks is to put them &amp;quot;inside&amp;quot; a device. This gives the screenshot some context.&lt;/p&gt;
&lt;p&gt;Even though this screenshot already contains Android top &amp;amp; bottom bars, with the added outline it&#39;s immediately obvious it&#39;s from a phone.&lt;/p&gt;
&lt;img class=&quot;alignleft wp-image-372&quot; src=&quot;https://psimyn.com/posts/better-mobile-screenshots/economist.png&quot; alt=&quot;The Economist on mobile is mostly sticky bullshit&quot; width=&quot;400&quot; height=&quot;711&quot; /&gt;
&lt;img class=&quot;phone-border wp-image-372 alignnone&quot; src=&quot;https://psimyn.com/posts/better-mobile-screenshots/economist.png&quot; alt=&quot;The Economist on mobile is mostly sticky bullshit&quot; width=&quot;400&quot; height=&quot;711&quot; /&gt;
&lt;p&gt;To add the outline to images I use a simple CSS border:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.phone-border&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #111 solid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;border-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2rem 1rem 3rem 1rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To take this further you can also make them responsive! So we see phone screenshots on phones, and a fake laptop screen outline on big/wide screens. This assumes you are using responsive images so you get desktop aspect ratio on bigger screens.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 800px &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;min-aspect-ratio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 16/9&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.phone-border&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ccc&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;border-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;
.phone-border {
  border: #111 solid;
  border-radius: 1rem;
  border-width: 2rem 1rem 3rem 1rem;
  box-shadow: 0 3px 4px #3338;
}
&lt;/style&gt;
</content>
	</entry>
	
	<entry>
		<title>The right way to disable CSS animations</title>
		<link href="https://psimyn.com/posts/disable-css-animations/"/>
		<updated>2020-01-20T00:00:00Z</updated>
		<id>https://psimyn.com/posts/disable-css-animations/</id>
		<content type="html">&lt;p&gt;Sometimes I want a way to disable all CSS animations on a page. This is useful for end-to-end testing, automatic screenshots, or reducing motion sickness risk. This &lt;a href=&quot;https://css-tricks.com/stop-animations-during-window-resizing/&quot;&gt;recent CSS Tricks post&lt;/a&gt; suggests disabling animations &amp;amp; transitions while resizing, to reduce needless browser work. This is an excellent idea! Here is the usual way of disabling animations:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.resize-animation-stopper *&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with setting &lt;code&gt;none&lt;/code&gt; is that &lt;code&gt;transitionend&lt;/code&gt; and &lt;code&gt;animationend&lt;/code&gt; events will no longer be fired. Maybe not a big deal, but it could also prevent stuff from working as you expect.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codepen.io/psimyn/pen/xxbXmrE&quot;&gt;This contrived example&lt;/a&gt; animates the border color on hover, and once that&#39;s finished sets the background color. But when animations are disabled, the background color never gets set!&lt;/p&gt;
&lt;p&gt;Andy Bell&#39;s &lt;a href=&quot;https://hankchizljaw.com/wrote/a-modern-css-reset/&quot;&gt;modern CSS reset&lt;/a&gt; adds a media query for &lt;code&gt;prefers-reduced-motion&lt;/code&gt; to disable animations for people who don&#39;t want them. This originally used the &lt;code&gt;none&lt;/code&gt; to disable, but was later &lt;a href=&quot;https://github.com/hankchizljaw/modern-css-reset/pull/6&quot;&gt;changed&lt;/a&gt; to instead use a very short duration (setting times lower than 0.01s can cause flickering)&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.resize-animation-stopper *&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;animation-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.01ms &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;animation-iteration-count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1 &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;transition-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.01ms &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;scroll-behavior&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means animations will end (almost) instantly, and not repeat. The &lt;code&gt;scroll-behaviour: auto&lt;/code&gt; ensures that smooth scrolling is disabled.&lt;/p&gt;
&lt;p&gt;Not quite as tidy as just writing &lt;code&gt;none&lt;/code&gt;, but guarantees your page works for everyone regardless of motion preferences.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Framer Project History</title>
		<link href="https://psimyn.com/posts/framer-history/"/>
		<updated>2020-02-09T00:00:00Z</updated>
		<id>https://psimyn.com/posts/framer-history/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://gitlab.com/duud/framer&quot;&gt;Framer&lt;/a&gt; is one of my favorite projects. It was the first &#39;real&#39; JS project I made, I think the first version was around 2012. It has consistently had some of my worst code and infrastructure. The deploy process is still either a shell script or a manually-installed WordPress plugin. It has years of tech debt stacked on it, has been through two major rewrites (which I generally avoid). The code has gone like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static HTML blob &amp;amp; some jQuery helpers in an inline script. Basically a form and a canvas element&lt;/li&gt;
&lt;li&gt;Separate JS/CSS files, served from a Drupal site, iframed on another site&lt;/li&gt;
&lt;li&gt;Ported to WordPress template + JS&lt;/li&gt;
&lt;li&gt;Rewritten using Svelte, still using canvas&lt;/li&gt;
&lt;li&gt;Rewritten using Svelte V3, now using SVG&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first three stages were all pretty much the same codebase, but with added if statements and special cases. This ended up being a few hundred lines of shit code, bunch of input event listeners, and obviously no tests. None of this particularly mattered since it was &lt;em&gt;my&lt;/em&gt; code - I knew how it worked and didn&#39;t need to explain it to others. And more importantly, it did what it needed to do; we&#39;d gone through what should be in the form, what the renderer should look like, tried a few different layouts. Code should do what is needed, cleanliness &amp;amp; structure is far less important (especially when working solo). It more or less stayed this way for several years, just quietly doing its job.&lt;/p&gt;
&lt;p&gt;At some point I added version control so I could more safely make changes and keep track of things. Deployment was (and still is) hugely manual - run build, scp to server, do some cache invalidation. Again, not something that mattered. I was deploying very infrequently so it&#39;s hard to justify the time on deployment automation; both in terms of wasted effort and potential risk (scripts have bugs too!).&lt;/p&gt;
&lt;p&gt;The first rewrite was mainly to check out Svelte - advertised as &amp;quot;the magical disappearing UI framework&amp;quot;. This was driven by interest more than any business or performance need. The previous version was hardly lightening fast, but it was far from the slowest thing on the page. Svelte ended up being quite nice to use. My two regrets were not using a store from the start (state scattered throughout the app), and continuing to use canvas rather than SVG. Canvas limited how interactive the renderer could be (point and click would be annoying effort), and my canvas code wastruly terrible. I&#39;m not a huge advocate of needless dryness, but there was some baaaad repetition in there. There was a function that took 6 arguments. All sorts of terrible shit.&lt;/p&gt;
&lt;p&gt;There was also a bunch of terrible WordPress glue code so it could load Woocommerce products, and add to cart. I wanted to write as little PHP/WP code as possible, so hacked together a working method using a few existing plugins and some hacks of my own. I added some e2e tests using Cypress, and setup a wordpress dev instance in Docker. Still too much effort to get this working in CI, but just running them on my local machine was enough validation that I hadn&#39;t destroyed everything when I made changes.&lt;/p&gt;
&lt;p&gt;Svelte 3 came out sometime last year. I&#39;d long held the opinion that I wouldn&#39;t rewrite framer, partly due to laziness, partly due to needless risk. But eventually I decided to give it a try. The &lt;a href=&quot;https://github.com/sveltejs/svelte/issues/2462&quot;&gt;GH issue for a migration guide&lt;/a&gt; gave the impression that there wouldn&#39;t be an offical guide or &lt;a href=&quot;http://tool.it/&quot;&gt;tool.It&lt;/a&gt; did offer a &lt;a href=&quot;https://github.com/tivac/svelte-translator&quot;&gt;Svelte Translator&lt;/a&gt;, but that seemed like more complication that it was worth. I had a skim through the &lt;a href=&quot;https://rajasegar.github.io/svelte2vs3/&quot;&gt;2vs3 cheatsheet&lt;/a&gt;, and kept the &lt;a href=&quot;https://svelte.dev/examples&quot;&gt;Svelte examples page&lt;/a&gt; open, and just manually rewrote the form code. This time I started with a store to keep state simpler and centralised.&lt;/p&gt;
&lt;p&gt;By the time I got up to writing the renderer, I thought I&#39;d try using some derived values to draw an SVG. First pass at getting something that looked similar went from around 700lines of horrible canvas code to about an 80 line Svelte component. I started writing the components from scratch in a separate project, then when it was reasonably complete I move it to the existing wordpress plugin src directory, and just updated the outer component. Minimal amount of the glue code has changed, and functionally it&#39;s the same as before.&lt;/p&gt;
&lt;p&gt;Eventually I should make it a proper WordPress plugin that uses real products, rather than just a custom fields product with custom pricing. But part of why I love this project is that it&#39;s mostly been optimized for enjoyment - I find easy solutions for things I don&#39;t want to work on, and can keep my focus on the interesting parts. The fact that a bunch of it is terrible glue code doesn&#39;t matter as long as it works.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Reducing use of Array.reduce</title>
		<link href="https://psimyn.com/posts/reducing-reduce-use/"/>
		<updated>2020-02-09T00:00:00Z</updated>
		<id>https://psimyn.com/posts/reducing-reduce-use/</id>
		<content type="html">&lt;p&gt;I recently went on a short anti-&lt;code&gt;reduce&lt;/code&gt; rant at work. Was in defence of &lt;code&gt;forEach&lt;/code&gt; and local mutations, but I came to the conclusion that it&#39;s mostly just because I don&#39;t like &lt;code&gt;reduce&lt;/code&gt;. Mostly when combined with fat arrow functions (which I also don&#39;t particularly like).&lt;/p&gt;
&lt;p&gt;Writing &lt;code&gt;reduce()&lt;/code&gt; makes you look smart. Reading reduce makes you feel stupid.&lt;/p&gt;
&lt;p&gt;The recent &lt;a href=&quot;https://www.youtube.com/watch?v=qaGjS7-qWzg&quot;&gt;HTTP 203: Is reduce() bad?&lt;/a&gt; covers many of my issues, the tldr:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the method signature is unpleasant&lt;/li&gt;
&lt;li&gt;most of the time you could use filter + map&lt;/li&gt;
&lt;li&gt;use reduce if you want a single value (e.g. sum)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt; has some use-cases, but they are rarer than its usage suggests. Most of the time I favor &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>My favorite code is my worst code</title>
		<link href="https://psimyn.com/posts/worst-code-best-code/"/>
		<updated>2020-02-09T00:00:00Z</updated>
		<id>https://psimyn.com/posts/worst-code-best-code/</id>
		<content type="html">&lt;p&gt;Most code is pretty terrible. Mine is particularly bad, but generally it&#39;s rare to see a project and think &amp;quot;wow that&#39;s good code&amp;quot;. This is fine. Code isn&#39;t literature. Clarity is still important, but code is meant to solve a problem (or cause a problem).&lt;/p&gt;
&lt;p&gt;I often see people point to some brilliant, clean, well-structured project as their favorite code. Some perfectly formed sculpture of numbers and text, chiseled to perfection over years of planning and refactoring. I&#39;m at the other end, and tend to love my hacky ugly snippets.&lt;/p&gt;
&lt;p&gt;They do what they are supposed to, and are a good chance to try new things.&lt;/p&gt;
&lt;p&gt;By the time you get caught up in making your code clean and DRY, well-structured and performant, unit-testable and unit-tested, it may as well be a work project. Work projects are not the place for learning too many new things.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Quitting is easier than cutting back</title>
		<link href="https://psimyn.com/posts/quitting-cutting-back/"/>
		<updated>2020-02-17T00:00:00Z</updated>
		<id>https://psimyn.com/posts/quitting-cutting-back/</id>
		<content type="html">&lt;p&gt;Something that has come up repeatedly in the past year is that quitting things entirely is often easier than reducing.&lt;/p&gt;
&lt;p&gt;Some recent occurences were a &lt;a href=&quot;https://tim.blog/2019/10/10/tim-on-happiness-dating-depressive-episodes/&quot;&gt;Tim Ferris Q&amp;amp;A&lt;/a&gt; where he talks about the &#39;one decision to remove 1000 decisions&#39;, and in &lt;a href=&quot;https://hbr.org/2010/07/how-will-you-measure-your-life&quot;&gt;Clay Christenssen speech to HBS graduates&lt;/a&gt; where he doesn&#39;t play ball on Sundays. &amp;quot;Just this once&amp;quot; means the question can come up literally every time the possibility exists. And you can waste a lot of time thinking up ways to justify it that still fit into whatever rules you have.&lt;/p&gt;
&lt;p&gt;Last week I tried to reduce coffee drinking to one per day. One both Monday and Wednesday I ended up having three! This is partly out of habit, partly out of a cheat-day mentality, Easier is to stop entirely; I usually do this when I travel.&lt;/p&gt;
</content>
	</entry>
</feed>
